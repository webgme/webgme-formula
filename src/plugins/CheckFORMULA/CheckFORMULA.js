/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu May 26 2016 11:18:54 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'plugin/PluginMessage',
    'superagent'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             PluginMessage,
             superagent) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CheckFORMULA.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CheckFORMULA.
     * @constructor
     */
    var CheckFORMULA = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CheckFORMULA.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CheckFORMULA.prototype = Object.create(PluginBase.prototype);
    CheckFORMULA.prototype.constructor = CheckFORMULA;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    CheckFORMULA.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            constraintsToCheck;

        self.currentConfig = self.getCurrentConfig();
        constraintsToCheck = self.currentConfig.constraints.split(" ") || [];

        if (constraintsToCheck.length === 0) {
            // there is nothing to check!!!
            self.result.addMessage(new PluginMessage({
                commitHash: self.commitHash,
                activeNode: '', //always point to the root
                message: 'There is no constraints to check!!!'
            }));
            callback(null, self.result);
        }

        self.blobClient.getObjectAsString(self.currentConfig.formulaModule, function (err, module) {
            if (err) {
                self.logger.error(err);
                self.result.addMessage(new PluginMessage({
                    commitHash: self.commitHash,
                    activeNode: '', //always point to the root
                    message: 'Cannot get Formula representation of the model!'
                }));
                callback(null, self.result);
                return;
            }

            superagent.post(self.currentConfig.formulaMachine)
                .set('Content-Type', 'application/json')
                .send({module: module, constraints: constraintsToCheck})
                .end(function (err, result) {
                    var simpleResults,
                        constraintName;

                    if (err) {
                        self.logger.error(err);
                        self.result.addMessage(new PluginMessage({
                            commitHash: self.commitHash,
                            activeNode: '', //always point to the root
                            message: 'Formula webservice is unresponsive!'
                        }));
                        callback(null, self.result);
                        return;
                    } else if (Object.keys(result.body).length === 0) {
                        // execution doesn't produced result
                        self.result.addMessage(new PluginMessage({
                            commitHash: self.commitHash,
                            activeNode: '', //always point to the root
                            message: 'Formula doesn\'t produced results. Check the syntax of your constraints!'
                        }));

                        callback(null, self.result);
                        return;
                    }

                    simpleResults = result.body;

                    for (constraintName in simpleResults) {
                        if (typeof simpleResults[constraintName] !== 'boolean') {
                            simpleResults[constraintName] = simpleResults[constraintName] === 'true';
                        }
                        if (constraintsToCheck.indexOf(constraintName) !== -1) {
                            constraintsToCheck.splice(constraintsToCheck.indexOf(constraintName), 1);
                        }
                    }

                    self.core.setAttribute(self.rootNode, '_formulaInfo', {
                            originCommitHash: self.commitHash,
                            simpleCheckResults: result.body
                        }
                    );
                    self.save('CheckFORMULA updated model.')
                        .then(function () {
                            self.result.addCommit(self.commitHash);
                            if (constraintsToCheck.length > 0) {
                                // not all constraints have resulted
                                self.result.addMessage(new PluginMessage({
                                    commitHash: self.commitHash,
                                    activeNode: '', //always point to the root
                                    message: 'Constraint(s): ' + constraintsToCheck +
                                    ' have not resulted, check their syntax!'
                                }));
                            } else {
                                self.result.setSuccess(true);
                            }
                            callback(null, self.result);
                        })
                        .catch(function (err) {
                            self.logger.error(err);
                            callback(null, self.result);
                        });
                });
        });
    };

    return CheckFORMULA;
});