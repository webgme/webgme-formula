/* Generated file based on ejs templates */
define([], function() {
    return {
    "DConstraint.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\n\n\n<%\n\nvar escapeWebGmeName = function(s) {\n            var result = s.replace(/(\\s|\\+)/g,\"_\");\n            return result;\n        },\n        getFormulaNames = function(s){\n            var result={};\n\n            result.primitiveName = getPrimitiveName(s);\n            result.unionName = getUnionName(s);\n            result.attributeName = 'Attr' + result.primitiveName;\n\n            return result;\n        },\n        getPrimitiveName = function(s){\n            var result;\n\n            result = escapeWebGmeName(s);\n            result = \"__\".concat(result);\n\n            return result;\n        },\n        getUnionName = function(s){\n            return escapeWebGmeName(s);\n        },\n/* createMetaInheritanceTree = function(nodeData, allNodes, results) {\n\n var baseName = 'NULL';\n\n if (allNodes[nodeData.base] == undefined){\n return null;\n } else {\n baseName = resolveWebGmeName(allNodes[nodeData.base].name);\n results[baseName] = true;\n createMetaInheritanceTree(nodeData.base, allNodes, results);\n }\n },*/\n        createMetaDescendantsList = function(nodeData, allNodes){\n            var results = {\n                primitiveNames : {},\n                unionNames : {}\n            }, i, currentChildNode;\n\n            for (prop in allNodes){\n                currentChildNode = allNodes[prop];\n\n                // Process just the metanodes with base (only node with base can be a descandant of an FCO)\n                if (currentChildNode.base  == null || !currentChildNode.isMetaType) continue;\n                currentBaseNode = allNodes[currentChildNode.base];\n\n\n                if (currentBaseNode.id === nodeData.id){\n                    results.primitiveNames[getPrimitiveName(currentChildNode.name)] = true;\n                    results.unionNames[getUnionName(currentChildNode.name)] = true;\n                }\n            }\n\n            return results;\n        },\n\n        formulaDomainName = \"DProject\",\n        formulaConstraintDomainName = \"DConstraint\"\n        formulaModelName = \"m\",\n\n// Creates a union from the KEY values of the dictionary\n        createFormulaUnion = function (dict, newUnionName){\n            var result = '',\n                    hadKey = false;\n\n            result = result.concat(newUnionName);\n            result = result.concat(\" ::= \");\n\n            for (prop in dict){\n                result = result.concat(prop);\n                result = result.concat(\" + \");\n                hadKey = true;\n            }\n\n            if (!hadKey){\n                return '';\n            }\n\n            result = result.slice(0,-3);\n\n            return result;\n        },\n\ndumpUnions = function(unions){\n    var i;\nfor (i = 0; i < unions.length; i += 1) {\n    if (unions[i] === '') continue; %>\n<%= unions[i] %><%=formula.lineEnding%>\n<%}\n};\n\n%>\n\n\ndomain <%= formulaDomainName %>\n{\n<%\nvar nodeData, i, j,\n        keys = Object.keys(nodes),\n        nodeUnion = {},\n        connectionUnion = {},\n        resolvedNames = [],\n        resolvedName = '',\n        formulaUnions = [],\n        pointerNames,\n        descendants=[],\n        baseName,\n        parentName,\n        srcId, dstId,\n        resolvedSrcName, resolvedDstName,\n        attrName = '', attrList;\n\nfor (i = 0; i < keys.length; i += 1) {\n    nodeData = nodes[keys[i]];\n    resolvedNames[nodeData.id] = getFormulaNames(nodeData.name);\n}\n\nfor (i = 0; i < keys.length; i += 1) {\n    baseNodes=[];\n    nodeData = nodes[keys[i]];\n    attrList = '';\n    pointerNames = Object.keys(nodeData.jsonMeta.pointers);\nif (nodeData.isMetaType) {\n    resolvedName = resolvedNames[nodeData.id];\n    attrType = resolvedName.attributeName;\n\n    // Get the attribute list\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n    for (j = 0; j < attributeNames.length; j += 1) {\n        attribute = nodeData.jsonMeta.attributes[attributeNames[j]];\n        attrList += attributeNames[j] + ':String, ';\n    }\n    if (attrList.length>1){\n        attrList = attrList.slice(0,-2);\n    }\n\n    // FCO\n    if (nodeData.base == null){\n        baseName= {\n            unionName : '{NULL}',\n            primitiveName : '{NULL}'\n        }\n    }\n    else{\n        baseName = resolvedNames[nodes[nodeData.base].id];\n    }\n\n    /*if (nodeData.parent == null){\n     parentName= {\n     unionName : '{NULL}',\n     primitiveName : '{NULL}'\n     }\n     }\n     else{\n     parentName = resolvedNames[nodes[nodeData.parent].id];\n     }*/\n\n    descendants = createMetaDescendantsList(nodeData, nodes);\n\n    var tmpUnion = descendants.unionNames;\n    tmpUnion[resolvedName.primitiveName] = true;\n\n    formulaUnions.push(createFormulaUnion(tmpUnion, resolvedName.unionName));\n\n\n    // If the node is a connection, add to the connection union\n    // and generate src, dst attributes\nif (nodeData.jsonMeta.pointers.src != undefined &&\n        nodeData.jsonMeta.pointers.dst != undefined) {\n\n    srcId = nodeData.jsonMeta.pointers.src.items[0];\n    dstId = nodeData.jsonMeta.pointers.dst.items[0];\n    resolvedSrcName = resolvedNames[srcId].unionName;\n    resolvedDstName = resolvedNames[dstId].unionName;\n\n    connectionUnion[resolvedName.unionName] = true; %>\n<%= resolvedName.primitiveName %> ::= new (id: String,\nsrc: any <%= resolvedSrcName %> + {NULL},\ndst: any <%= resolvedDstName %> + {NULL},\nbase: any <%= baseName.unionName %> + {NULL},\nparent: any GMENode,\nattributes: <%=attrType%> + {NULL})\n<%=formula.lineEnding%>\n<%}\nelse { %>\n<%= resolvedName.primitiveName %> ::=\nnew (id:String,\nbase: any <%= resolvedName.primitiveName %> + {NULL},\nparent: any GMENode + {NULL},\nattributes: <%=attrType%> + {NULL})\n<%=formula.lineEnding%>\n<% }\n\n    nodeUnion[resolvedName.unionName] = true;%>\n\n// Attributes\n<%=attrType%> ::= new (<%=attrList%>)<%=formula.lineEnding%>\n\n<%\n}\n}\n\n// Process the unions\nformulaUnions.push(createFormulaUnion(nodeUnion, \"GMENode\"));\nformulaUnions.push(createFormulaUnion(connectionUnion, \"GMEConnections\"));\n\ndumpUnions(formulaUnions);\n%>\n\n// ContainmentTree\nContainmentTree ::= (child: GMENode, parent:GMENode + {NULL}).\nContainmentTree(child, parent) :-   child is GMENode\n, parent = child.parent\n; ContainmentTree(child, x)\n, ContainmentTree(x, parent)\n.\n\n// InheritanceTree\nInheritanceTree ::= (child: GMENode, base: GMENode + {NULL}).\nInheritanceTree(child, base) :-     child is GMENode\n, base = child.base\n; InheritanceTree(child, x)\n, InheritanceTree(x, base)\n.\n}\n\n<%\n\nvar generatedIds = {},\n        generateId = function () {\n\n            var text = \"\";\n            var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            var exists = false;\n\n            do {\n                text=\"\";\n                text += possible.charAt(Math.floor(Math.random() * (possible.length-10)));\n                for(var i=0; i < 9; i++ )\n                    text += possible.charAt(Math.floor(Math.random() * possible.length));\n                if (generatedIds[text]!=undefined){\n                    exists=true;\n                }\n                else{\n                    generatedIds[text]=true;\n                }\n            } while (exists)\n\n            return text;\n        },\n\n\n/*var S4 = function() {\n return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n };\n return (S4()+S4()+\"_\"+S4()+\"_\"+S4()+\"_\"+S4()+\"_\"+S4()+S4()+S4());\n },*/\n\n        nodeIdFormulaId = {},\n\ncreateAttribute = function(nodeData){\n    var baseNode = nodes[nodeData.base],\n            metaNode = nodes[nodeData.meta],\n            attrType = resolvedNames[metaNode.id].attributeName,\n            attrValues = '',\n            attribute,\n            attributeNames = Object.keys(nodeData.jsonMeta.attributes),\n            attrId = generateId(),\n            attrValue = '';\n\n    for (j = 0; j < attributeNames.length; j += 1) {\n        attrValue = nodeData.attributes[attributeNames[j]];\n        if (attrValue==null) attrValue = 'NULL';\n        attrValues +=  '\"' + attrValue + '\"' + ', ';\n    }\n\n    if (attrValues.length>1){\n        attrValues = attrValues.slice(0,-2);\n    }%>\n<%=attrId%> is <%=attrType%>(<%-attrValues%>)<%=formula.lineEnding%>\n<%\n\n    return attrId;\n},\n\ncreateNode = function(nodeId){\n    nodeData = nodes[nodeId];\n    if (nodeIdFormulaId[nodeId]!=undefined)\n        return nodeIdFormulaId[nodeId];\n\n    var formulaId = generateId(),\n            metaNode = nodes[nodeData.meta],\n            baseNode = nodes[nodeData.base],\n            parentNode = nodes[nodeData.parent],\n            parentNodeFormulaId = '',\n            srcFormulaId = '', dstFormulaId = '',\n            srcId, dstId, baseNodeId,\n            resolvedMetaName = resolvedNames[metaNode.id],\n            attrId = createAttribute(nodeData);\n\n    nodeIdFormulaId[nodeId] = formulaId;\n\n    // Create the parent (if it is not the root, or the root is not the parent of the current one)\n    if (parentNode==null || parentNode.id===''){\n        parentNodeFormulaId = 'NULL';\n    }\n    else{\n        createNode(parentNode.id);\n        parentNodeFormulaId = nodeIdFormulaId[parentNode.id];\n    }\n\n    // Create basenode (just for sure)\n    if (baseNode == null || baseNode.isMetaType) {\n        baseNodeId = 'NULL';\n    }\n    else {\n        createNode(baseNode.id);\n        baseNodeId = nodeIdFormulaId[baseNode.id];\n    }\n\n    // Handle connections\n    // Check if the metanode contains src/dst definitions\nif (metaNode.jsonMeta.pointers.src != undefined &&\n        metaNode.jsonMeta.pointers.dst != undefined) {\n\n    srcId = nodeData.pointers['src'];\n    dstId = nodeData.pointers['dst'];\n\n    if (srcId == null) {\n        srcFormulaId = \"NULL\";\n    }else{\n        srcFormulaId = createNode(srcId);\n    }\n\n    if (dstId == null) {\n        dstFormulaId = \"NULL\";\n    }else{\n        dstFormulaId = createNode(dstId);\n    }\n\n%>\n\n<%= formulaId %> is <%=resolvedMetaName.primitiveName%> (\"<%= nodeId %>\", <%= srcFormulaId %>, <%= dstFormulaId %>, <%= baseNodeId %>, <%= parentNodeFormulaId %>,  <%= attrId %>)<%=formula.lineEnding%>\n\n<%\n}\nelse{\n%>\n\n<%= formulaId %> is <%=resolvedMetaName.primitiveName%> (\"<%= nodeId %>\", <%= baseNodeId %>, <%= parentNodeFormulaId %>,  <%= attrId %>)<%=formula.lineEnding%>\n\n<%\n\n    return formulaId;\n}\n};\n\n%>\ndomain <%= formulaConstraintDomainName %> extends <%= formulaDomainName %>\n{\n<%= userDefinedConstraints %>\n}\n\nmodel M of <%= formulaConstraintDomainName %>\n{\n<%\n\nfor (i = 0; i < keys.length; i += 1) {\n    baseNodes=[];\n    nodeData = nodes[keys[i]];\n    pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    if (!nodeData.isMetaType && nodeData.id!=\"\") {\n        createNode(nodeData.id);\n    }\n}\n\n%>\n}",
    "DSpecific.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\n\n\n<%\n\nvar escapeWebGmeName = function(s) {\n      var result = s.replace(/(\\s|\\+)/g,\"_\");\n      return result;\n    },\n    getFormulaNames = function(s){\n      var result={};\n\n      result.primitiveName = getPrimitiveName(s);\n      result.unionName = getUnionName(s);\n      result.attributeName = 'Attr' + result.primitiveName;\n\n      return result;\n    },\n    getPrimitiveName = function(s){\n      var result;\n\n      result = escapeWebGmeName(s);\n      result = \"__\".concat(result);\n\n      return result;\n    },\n    getUnionName = function(s){\n      return escapeWebGmeName(s);\n    },\n    /* createMetaInheritanceTree = function(nodeData, allNodes, results) {\n\n      var baseName = 'NULL';\n\n      if (allNodes[nodeData.base] == undefined){\n        return null;\n      } else {\n        baseName = resolveWebGmeName(allNodes[nodeData.base].name);\n        results[baseName] = true;\n        createMetaInheritanceTree(nodeData.base, allNodes, results);\n      }\n    },*/\n    createMetaDescendantsList = function(nodeData, allNodes){\n      var results = {\n        primitiveNames : {},\n        unionNames : {}\n      }, i, currentChildNode;\n\n      for (prop in allNodes){\n        currentChildNode = allNodes[prop];\n\n        // Process just the metanodes with base (only node with base can be a descandant of an FCO)\n        if (currentChildNode.base  == null || !currentChildNode.isMetaType) continue;\n        currentBaseNode = allNodes[currentChildNode.base];\n\n\n        if (currentBaseNode.id === nodeData.id){\n          results.primitiveNames[getPrimitiveName(currentChildNode.name)] = true;\n          results.unionNames[getUnionName(currentChildNode.name)] = true;\n        }\n      }\n\n      return results;\n    },\n\n    formulaDomainName = \"D\".concat(escapeWebGmeName(projectName)),\n    formulaModelName = \"m\",\n\n    // Creates a union from the KEY values of the dictionary\n    createFormulaUnion = function (dict, newUnionName){\n      var result = '',\n          hadKey = false;\n\n      result = result.concat(newUnionName);\n      result = result.concat(\" ::= \");\n\n      for (prop in dict){\n        result = result.concat(prop);\n        result = result.concat(\" + \");\n        hadKey = true;\n      }\n\n      if (!hadKey){\n        return '';\n      }\n\n      result = result.slice(0,-3);\n\n      return result;\n    },\n\n    dumpUnions = function(unions){\n      var i;\n      for (i = 0; i < unions.length; i += 1) {\n        if (unions[i] === '') continue; %>\n      <%= unions[i] %><%=formula.lineEnding%>\n      <%}\n    };\n\n%>\n\n\ndomain <%= formulaDomainName %>\n{\n<%\n  var nodeData, i, j,\n      keys = Object.keys(nodes),\n      nodeUnion = {},\n      connectionUnion = {},\n      resolvedNames = [],\n      resolvedName = '',\n      formulaUnions = [],\n      pointerNames,\n      descendants=[],\n      baseName,\n      parentName,\n      srcId, dstId,\n      resolvedSrcName, resolvedDstName,\n      attrName = '', attrList;\n\n  for (i = 0; i < keys.length; i += 1) {\n    nodeData = nodes[keys[i]];\n    resolvedNames[nodeData.id] = getFormulaNames(nodeData.name);\n  }\n\n  for (i = 0; i < keys.length; i += 1) {\n    baseNodes=[];\n    nodeData = nodes[keys[i]];\n    attrList = '';\n    pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    if (nodeData.isMetaType) {\n      resolvedName = resolvedNames[nodeData.id];\n      attrType = resolvedName.attributeName;\n      \n      // Get the attribute list\n      var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n      for (j = 0; j < attributeNames.length; j += 1) {\n         attribute = nodeData.jsonMeta.attributes[attributeNames[j]];\n         attrList += attributeNames[j] + ':String, ';\n      }\n      if (attrList.length>1){\n          attrList = attrList.slice(0,-2);\n      }\n\n      // FCO\n      if (nodeData.base == null){\n        baseName= {\n          unionName : '{NULL}',\n          primitiveName : '{NULL}'\n        }\n      }\n      else{\n        baseName = resolvedNames[nodes[nodeData.base].id];\n      }\n      \n      /*if (nodeData.parent == null){\n          parentName= {\n            unionName : '{NULL}',\n            primitiveName : '{NULL}'\n          }\n      }\n      else{\n          parentName = resolvedNames[nodes[nodeData.parent].id];\n      }*/\n\n      descendants = createMetaDescendantsList(nodeData, nodes);\n\n      var tmpUnion = descendants.unionNames;\n      tmpUnion[resolvedName.primitiveName] = true;\n\n      formulaUnions.push(createFormulaUnion(tmpUnion, resolvedName.unionName));\n\n\n      // If the node is a connection, add to the connection union\n      // and generate src, dst attributes\n      if (nodeData.jsonMeta.pointers.src != undefined &&\n          nodeData.jsonMeta.pointers.dst != undefined) {\n\n        srcId = nodeData.jsonMeta.pointers.src.items[0];\n        dstId = nodeData.jsonMeta.pointers.dst.items[0];\n        resolvedSrcName = resolvedNames[srcId].unionName;\n        resolvedDstName = resolvedNames[dstId].unionName;\n\n        connectionUnion[resolvedName.unionName] = true; %>\n        <%= resolvedName.primitiveName %> ::= new (id: String,\n                          src: any <%= resolvedSrcName %> + {NULL},\n                          dst: any <%= resolvedDstName %> + {NULL},\n                          base: any <%= baseName.unionName %> + {NULL},\n                          parent: any GMENode,\n                          attributes: <%=attrType%> + {NULL})\n                          <%=formula.lineEnding%>\n      <%}\n      else { %>\n        <%= resolvedName.primitiveName %> ::=\n                  new (id:String,\n                       base: any <%= resolvedName.primitiveName %> + {NULL},\n                       parent: any GMENode + {NULL},\n                       attributes: <%=attrType%> + {NULL})\n                       <%=formula.lineEnding%>\n      <% }\n\n      nodeUnion[resolvedName.unionName] = true;%>\n      \n      // Attributes\n      <%=attrType%> ::= new (<%=attrList%>)<%=formula.lineEnding%>\n\n<%\n    }\n  }\n\n  // Process the unions\n  formulaUnions.push(createFormulaUnion(nodeUnion, \"GMENode\"));\n  formulaUnions.push(createFormulaUnion(connectionUnion, \"GMEConnections\"));\n\n  dumpUnions(formulaUnions);\n%>\n\n  // ContainmentTree\n  ContainmentTree ::= (child: GMENode, parent:GMENode + {NULL}).\n  ContainmentTree(child, parent) :-   child is GMENode\n                                    , parent = child.parent\n                                    ; ContainmentTree(child, x)\n                                    , ContainmentTree(x, parent)\n                                    .\n                                    \n  // InheritanceTree\n  InheritanceTree ::= (child: GMENode, base: GMENode + {NULL}).\n  InheritanceTree(child, base) :-     child is GMENode\n                                    , base = child.base\n                                    ; InheritanceTree(child, x)\n                                    , InheritanceTree(x, base)\n                                    .\n}\n\n<%\n\nvar generatedIds = {},\n    generateId = function () {\n    \n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        var exists = false;\n\n        do {\n            text=\"\";\n            text += possible.charAt(Math.floor(Math.random() * (possible.length-10)));\n            for(var i=0; i < 9; i++ )\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\n            if (generatedIds[text]!=undefined){\n                exists=true;\n            }\n            else{\n                generatedIds[text]=true;\n            }\n        } while (exists)\n        \n        return text;\n    },\n    \n    \n    /*var S4 = function() {\n       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n    };\n    return (S4()+S4()+\"_\"+S4()+\"_\"+S4()+\"_\"+S4()+\"_\"+S4()+S4()+S4());\n    },*/\n    \n    nodeIdFormulaId = {},\n    \n    createAttribute = function(nodeData){\n        var baseNode = nodes[nodeData.base],\n            metaNode = nodes[nodeData.meta],\n            attrType = resolvedNames[metaNode.id].attributeName,\n            attrValues = '',\n            attribute,\n            attributeNames = Object.keys(nodeData.jsonMeta.attributes),\n            attrId = generateId(),\n            attrValue = '';\n        \n        for (j = 0; j < attributeNames.length; j += 1) {\n            attrValue = nodeData.attributes[attributeNames[j]];\n            if (attrValue==null) attrValue = 'NULL';\n            attrValues +=  '\"' + attrValue + '\"' + ', ';\n        }\n        \n        if (attrValues.length>1){\n            attrValues = attrValues.slice(0,-2);\n        }%>\n            <%=attrId%> is <%=attrType%>(<%-attrValues%>)<%=formula.lineEnding%>\n        <%\n        \n        return attrId;\n    },\n    \n    createNode = function(nodeId){\n        nodeData = nodes[nodeId];\n        if (nodeIdFormulaId[nodeId]!=undefined)\n            return nodeIdFormulaId[nodeId];\n        \n        var formulaId = generateId(),\n            metaNode = nodes[nodeData.meta],\n            baseNode = nodes[nodeData.base],\n            parentNode = nodes[nodeData.parent],\n            parentNodeFormulaId = '',\n            srcFormulaId = '', dstFormulaId = '',\n            srcId, dstId, baseNodeId,\n            resolvedMetaName = resolvedNames[metaNode.id],\n            attrId = createAttribute(nodeData);\n            \n        nodeIdFormulaId[nodeId] = formulaId;\n        \n        // Create the parent (if it is not the root, or the root is not the parent of the current one)\n        if (parentNode==null || parentNode.id===''){\n            parentNodeFormulaId = 'NULL';\n        }\n        else{\n            createNode(parentNode.id);     \n            parentNodeFormulaId = nodeIdFormulaId[parentNode.id];       \n        }\n        \n        // Create basenode (just for sure)        \n        if (baseNode == null || baseNode.isMetaType) {\n            baseNodeId = 'NULL';\n        }\n        else {\n            createNode(baseNode.id);\n            baseNodeId = nodeIdFormulaId[baseNode.id];\n        }\n                \n        // Handle connections\n        // Check if the metanode contains src/dst definitions \n        if (metaNode.jsonMeta.pointers.src != undefined &&\n            metaNode.jsonMeta.pointers.dst != undefined) {\n            \n            srcId = nodeData.pointers['src'];\n            dstId = nodeData.pointers['dst'];\n            \n            if (srcId == null) {\n                srcFormulaId = \"NULL\";\n            }else{\n                srcFormulaId = createNode(srcId);\n            }\n            \n            if (dstId == null) {\n                dstFormulaId = \"NULL\";\n            }else{\n                dstFormulaId = createNode(dstId);\n            }\n            \n            %>\n            \n            <%= formulaId %> is <%=resolvedMetaName.primitiveName%> (\"<%= nodeId %>\", <%= srcFormulaId %>, <%= dstFormulaId %>, <%= baseNodeId %>, <%= parentNodeFormulaId %>,  <%= attrId %>)<%=formula.lineEnding%>\n                \n            <%\n            }\n        else{\n            %>\n            \n            <%= formulaId %> is <%=resolvedMetaName.primitiveName%> (\"<%= nodeId %>\", <%= baseNodeId %>, <%= parentNodeFormulaId %>,  <%= attrId %>)<%=formula.lineEnding%>\n\n            <%\n        \n            return formulaId;\n          }\n    };\n    \n%>\n\nmodel M of <%= formulaDomainName %>\n{\n<%\n    \n    for (i = 0; i < keys.length; i += 1) {\n        baseNodes=[];\n        nodeData = nodes[keys[i]];\n        pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n        if (!nodeData.isMetaType && nodeData.id!=\"\") {\n            createNode(nodeData.id); \n        }\n    }\n    \n%>\n}",
    "DWebGME.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\ndomain WebGME\n{\n  ///////////////////////\n  // WebGME primitives //\n  ///////////////////////\n\n<% if (formulaVersion === '1') { %>\n  primitive GMENode      ::= (id: String, base: String).\n  primitive GMEAttribute ::= (name:String, value:String, nodeId:String).\n  primitive GMEParent    ::= (childId: String, parentId: String).\n  primitive GMEAbstract  ::= (nodeId:String, value:Boolean).\n  primitive GMEPointer   ::= (name:String, pointsToId:String, nodeId:String).\n  primitive GMEIsMetaType::= (nodeId:String, value:Boolean).\n\n  primitive Debug ::= (String, String).\n<% } else if (formulaVersion === '2') { %>\n  GMENode      ::= new (id: String, base: String).\n  GMEAttribute ::= new (name:String, value:String, nodeId:String).\n  GMEParent    ::= new (childId: String, parentId: String).\n  GMEAbstract  ::= new (nodeId:String, value:Boolean).\n  GMEPointer   ::= new (name:String, pointsToId:String, nodeId:String).\n  GMEIsMetaType    ::= new (nodeId:String, value:Boolean).\n\n  Debug ::= new (String, String).\n<% } %>\n\n  ////////////////\n  // WebGME API //\n  ////////////////\n\n  // Inheritance\n  Base ::= (child:GMENode, base:GMENode).\n  Base(child, base) :-   child is GMENode(childId, baseId)\n                       , base is GMENode(baseId, _)\n                       .\n\n  // InheritanceTree\n  InheritanceTree ::= (child: GMENode, parent: GMENode).\n  InheritanceTree(child, parent) :-   Base(child, parent)\n                                    ; InheritanceTree(child, x)\n                                    , InheritanceTree(x, parent)\n                                    .\n\n  // Real meta\n  MetaType ::= (node: GMENode, metaNode: GMENode).\n  MetaType(node, metaNode) :-   node is GMENode\n                              , Base(node, metaNode)\n                              , IsMetaType(node, <%=formula.false%>)\n                              , IsMetaType(metaNode, <%=formula.true%>)\n                              ; MetaType(x, metaNode)\n                              , InheritanceTree(node, x)\n                              , IsMetaType(x, <%=formula.false%>)\n                              .\n\n  // Containment - Contained relationship\n  Parent ::= (childNode: GMENode, parentNode: GMENode).\n  Parent(childNode, parentNode) :-   GMEParent(childId, parentId)\n                                   , childNode is GMENode(childId, _)\n                                   , parentNode is GMENode(parentId, _)\n                                   .\n\n  // ContainmentTree\n  ContainmentTree ::= (child: GMENode, parent:GMENode).\n  ContainmentTree(child, parent) :-   Parent(child, parent)\n                                    ; ContainmentTree(child, x)\n                                    , ContainmentTree(x, parent)\n                                    .\n\n  // Abstract\n  IsAbstract ::= (GMENode, Boolean).\n  IsAbstract(node, value) :-   GMEAbstract(nodeId, value)\n                             , node is GMENode(nodeId, _)\n                             .\n\n   // IsMetaType\n   IsMetaType ::= (GMENode, Boolean).\n   IsMetaType(node, value) :-   GMEIsMetaType(nodeId, value)\n                              , node is GMENode(nodeId, _)\n                              .\n\n  // Connections\n  Connections ::= (GMENode).\n  Connections(n) :-   n is GMENode\n                    , Pointer(\"src\", _, n)\n                    , Pointer(\"dst\", _, n)\n                    .\n\n\n  // Attributes and Pointers\n  Attribute ::= (name:String, value:String, node:GMENode).\n  Attribute(name, value, node) :-   GMEAttribute(name, value, nodeId)\n                                  , node is GMENode(nodeId, _)\n                                  .\n\n  Pointer ::= (name:String, pointsTo:GMENode, node:GMENode).\n  Pointer(name, pointsTo, node) :-   GMEPointer(name, pointsToId, nodeId)\n                                   , node is GMENode(nodeId, _)\n                                   , pointsTo is GMENode(pointsToId, _)\n                                   .\n\n  // Basic functions: Getters\n  GetName ::= (name:String, node:GMENode).\n  GetName(name, node) :- Attribute(\"name\", name, node).\n\n  GetNode ::= (id:String, node:GMENode).\n  GetNode(id, node) :- node is GMENode(id, _).\n\n  GetSrcNode ::= (srcNode: GMENode, connectionNode: GMENode).\n  GetSrcNode(srcNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"src\", srcNode, connNode)\n                                   .\n\n  GetDstNode ::= (dstNode: GMENode, connectionNode: GMENode).\n  GetDstNode(dstNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"dst\", dstNode, connNode)\n                                   .\n}\n",
    "DWebGMEExtended.4ml.ejs": "\n[\n  modules.WebGME = \"WebGME at DWebGME.4ml\"\n]\n\n\ndomain DWebGMEExtended extends WebGME\n{\n<% var nodeData, i, j, keys = Object.keys(nodes);\n   for (i = 0; i < keys.length; i += 1) {\n       nodeData = nodes[keys[i]];\n       if (nodeData.isMetaType) {\n        var attributeNames = Object.keys(nodeData.jsonMeta.attributes),\n            nameAttribute  = nodeData.attributes['name'].replace(/\\s+/gi,\"\");%>\n\n        <%= nameAttribute %> ::= new (GMENode)<%= formula.lineEnding %>\n        <%= nameAttribute %>(childNode) :-\n             metaNode is GMENode(\"<%=nodeData.id%>\", _),\n             InheritanceTree(childNode, metaNode),\n             IsMetaType(childNode, <%=formula.false%>)<%= formula.lineEnding %>\n       <%}\n   }\n%>\n}\n",
    "MSpecific.4ml.ejs": "",
    "MWebGME.4ml.ejs": "\n\n<% if (formulaVersion === '1') { %>\ntransform T from in1::WebGME to out1::WebGME\n{\n  /*out1.Debug(cr_name, cr_id) :-\n                                metaDfId = \"/1329246314/808227394/1194191410\"\n                              , appNode = in1.GMENode(\"/817592481/G/n\", _)\n\n                              , cr_name=\"credit_identity\"\n\n                              , metaDfNode = in1.GMENode(metaDfId, _)\n                              , in1.InheritanceTree(child, metaDfNode)\n                              , in1.ContainmentTree(child, appNode)\n                              , child is in1.GMENode(cr_id, _)\n                              , in1.Attribute(\"name\", cr_name, child)\n                              .*/\n  out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n}\n<% } else if (formulaVersion === '2') { %>\ntransform T (in1::WebGME) returns (out1::WebGME)\n{\n  //out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n  out1.Debug(name, metaName) :- in1.GetName(metaName, metaNode)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            .\n}\n\ntransform T2 (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(\"src\", srcId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetSrcNode(srcNode, cNode)\n                            , in1.GetNode(srcId, srcNode)\n                            .\n  out1.Debug(\"dst\", dstId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetDstNode(dstNode, cNode)\n                            , in1.GetNode(dstId, dstNode)\n                            .\n}\n\ntransform TMetaTypes (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(nodeId, name) :- in1.GetNode(nodeId, node)\n                            , in1.IsMetaType(node, TRUE)\n                            , in1.GetName(name, node)\n                            .\n}\n\ntransform TInstanceModels (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, metaName) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(metaName, metaNode)\n                            .\n}\n\ntransform TInstancesOfType (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, nodeId) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.GetNode(nodeId, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(\"Center\", metaNode)\n                            .\n}\n<% } %>\n\n\n\n\nmodel m of WebGME\n{\n  <%\n  var nodeData, i, j, keys = Object.keys(nodes);\n  for (i = 0; i < keys.length; i += 1) {\n      nodeData = nodes[keys[i]];%>\n  // <%= nodeData.name %>\n  // <%= nodeData.id %>\n  // <%= nodeData.guid %>\n\n    <% if (nodeData.base) { %>\n      GMENode(\"<%= nodeData.id %>\", \"<%= nodes[nodeData.base].id %>\")<%=formula.lineEnding%>\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\n    <%} else {%>\n      // FCO\n      GMENode(\"<%= nodeData.id %>\", \"\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.parent!=null) { %>\n    GMEParent(\"<%= nodeData.id %>\", \"<%= nodeData.parent %>\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.isAbstract) { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.isMetaType) { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\n      <%\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\n      <%}%>\n    <%}%>\n    <%\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n    for (j = 0; j < attributeNames.length; j += 1) {\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\n      GMEAttribute(\"<%= attributeNames[j] %>\", \"<%= nodeData.attributes[attributeNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\n    <%}%>\n    <%\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    for (j = 0; j < pointerNames.length; j += 1) {\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\n      GMEPointer(\"<%= pointerNames[j] %>\", \"<%= nodeData.pointers[pointerNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\n    <%}%>\n  <%}%>\n}\n",
    "MWebGMEExtended.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\n[\n  modules.DWebGMEExtended = \"DWebGMEExtended at DWebGMEExtended.4ml\"\n]\n\nmodel M of DWebGMEExtended\n{\n  <%\n  var nodeData, i, j, keys = Object.keys(nodes);\n  for (i = 0; i < keys.length; i += 1) {\n      nodeData = nodes[keys[i]];%>\n  // <%= nodeData.name %>\n  // <%= nodeData.id %>\n  // <%= nodeData.guid %>\n\n    <% if (nodeData.base) { %>\n      GMENode(\"<%= nodeData.id %>\", \"<%= nodes[nodeData.base].id %>\")<%=formula.lineEnding%>\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\n    <%} else {%>\n      // FCO\n      GMENode(\"<%= nodeData.id %>\", \"\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.parent!=null) { %>\n    GMEParent(\"<%= nodeData.id %>\", \"<%= nodeData.parent %>\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.isAbstract) { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.isMetaType) { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\n      <%\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\n      <%}%>\n    <%}%>\n    <%\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n    for (j = 0; j < attributeNames.length; j += 1) {\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\n      GMEAttribute(\"<%= attributeNames[j] %>\", \"<%= nodeData.attributes[attributeNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\n    <%}%>\n    <%\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    for (j = 0; j < pointerNames.length; j += 1) {\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\n      GMEPointer(\"<%= pointerNames[j] %>\", \"<%= nodeData.pointers[pointerNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\n    <%}%>\n  <%}%>\n}\n",
    "T2DS.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\n\n\n<%\n\nvar escapeWebGmeName = function(s) {\n      var result = s.replace(/(\\s|\\+)/g,\"_\");\n      return result;\n    },\n    getFormulaNames = function(s){\n      var result={};\n\n      result.primitiveName = getPrimitiveName(s);\n      result.unionName = getUnionName(s);\n\n      return result;\n    },\n    getPrimitiveName = function(s){\n      var result;\n\n      result = escapeWebGmeName(s);\n      result = \"__\".concat(result);\n\n      return result;\n    },\n    getUnionName = function(s){\n      return escapeWebGmeName(s);\n    },\n    createMetaDescendantsList = function(nodeData, allNodes){\n      var results = {\n        primitiveNames : {},\n        unionNames : {}\n      }, i, currentChildNode;\n\n      for (prop in allNodes){\n        currentChildNode = allNodes[prop];\n\n        // Process just the metanodes with base (only node with base can be a descandant of an FCO)\n        if (currentChildNode.base  == null || !currentChildNode.isMetaType) continue;\n        currentBaseNode = allNodes[currentChildNode.base];\n\n\n        if (currentBaseNode.id === nodeData.id){\n          results.primitiveNames[getPrimitiveName(currentChildNode.name)] = true;\n          results.unionNames[getUnionName(currentChildNode.name)] = true;\n        }\n      }\n\n      return results;\n    },\n\n    formulaDomainName = \"D\".concat(escapeWebGmeName(projectName)),\n    formulaModelName = \"m\",\n\n    // Creates a union from the KEY values of the dictionary\n    createFormulaUnion = function (dict, newUnionName){\n      var result = '',\n          hadKey = false;\n\n      result = result.concat(newUnionName);\n      result = result.concat(\" ::= \");\n\n      for (prop in dict){\n        result = result.concat(prop);\n        result = result.concat(\" + \");\n        hadKey = true;\n      }\n\n      if (!hadKey){\n        return '';\n      }\n\n      result = result.slice(0,-3);\n\n      return result;\n    },\n\n    dumpUnions = function(unions){\n      var i;\n      for (i = 0; i < unions.length; i += 1) {\n        if (unions[i] === '') continue; %>\n      <%= unions[i] %><%=formula.lineEnding%>\n      <%}\n    };\n\n%>\n\n[\n  modules.DWebGMEExtended = \"DWebGMEExtended at DWebGMEExtended.4ml\",\n  modules.<%=formulaDomainName%> = \"<%=formulaDomainName%> at DSpecific.4ml\"\n]\n\n\n// Transform to Domain Specific representation\ntransform T2DS (in1::DWebGMEExtended) returns (out1::<%=formulaDomainName%>)\n{\n<%\n  var resolvedNames = [],\n      keys = Object.keys(nodes),\n      nodeData, resolvedNames,\n      i, j,\n      lhsName, baseName,\n      srcId, dstId,\n      resolvedSrcName, resolvedDstName;\n\n  for (i = 0; i < keys.length; i += 1) {\n    nodeData = nodes[keys[i]];\n    resolvedNames[nodeData.id] = getFormulaNames(nodeData.name);\n  }\n\n  for (i = 0; i < keys.length; i += 1) {\n    nodeData = nodes[keys[i]];\n    if (nodeData.isMetaType) {\n      lhsName = resolvedNames[nodeData.id].primitiveName;\n      \n      \n      \n      //baseName = resolvedNames[nodes[nodeData.id].base].primitiveName;\n      \n      \n      // Connections\n      if (nodeData.jsonMeta.pointers.src != undefined &&\n          nodeData.jsonMeta.pointers.dst != undefined) {\n          \n          srcId = nodeData.jsonMeta.pointers.src.items[0];\n          dstId = nodeData.jsonMeta.pointers.dst.items[0];\n          resolvedSrcName = resolvedNames[srcId].unionName;\n          resolvedDstName = resolvedNames[dstId].unionName;\n          \n          %>\n          \n          out1.<%=lhsName%>(id, NULL, NULL, NULL) :-\n                                     in1.MetaType(node, metaNode)\n                                   , node is in1.GMENode(id, _)\n                                   , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n                                   , Base(node, baseNode)\n                                   , IsMetaType(baseNode, <%=formula.true%>)\n                                   , no GetSrcNode(_, node)\n                                   , no GetDstNode(_, node)\n                                   .\n                                   \n          out1.<%=lhsName%>(id, NULL, NULL, baseNode) :-\n                                  in1.MetaType(node, metaNode)\n                                , node is in1.GMENode(id, baseNodeId)\n                                , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n                                , baseNode is out1.<%=lhsName%>(baseNodeId,_,_,_)\n                                , no GetSrcNode(_, node)\n                                , no GetDstNode(_, node)\n                                .\n                                \n          out1.<%=lhsName%>(id, srcOut, dstOut, baseNode) :-\n                                  in1.MetaType(node, metaNode)\n                                , node is in1.GMENode(id, baseNodeId)\n                                , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n                                , baseNode is out1.<%=lhsName%>(baseNodeId,_,_,_)\n                                , GetSrcNode(srcIn, node)\n                                , GetDstNode(dstIn, node)\n                                , srcOut is out1.<%=resolvedSrcName%>\n                                , srcOut.id = srcIn.id\n                                , dstOut is out1.<%=resolvedDstName%>\n                                , dstOut.id = dstIn.id\n                                .\n                               \n          \n          <%\n          \n      }\n      else{\n      %>\n      \n      \n\n      out1.<%=lhsName%>(id, NULL) :- in1.MetaType(node, metaNode)\n                                   , node is in1.GMENode(id, _)\n                                   , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n                                   , Base(node, baseNode)\n                                   , IsMetaType(baseNode, <%=formula.true%>)\n                                   .\n                                   \n      out1.<%=lhsName%>(id, baseNode) :-\n                                  in1.MetaType(node, metaNode)\n                                , node is in1.GMENode(id, baseNodeId)\n                                , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n                                , baseNode is out1.<%=lhsName%>(baseNodeId,_)\n                                .\n                                       \n                                       \n                                       \n                                   \n      //out1.<%=lhsName%>(id, NULL) :-   in1.MetaType(node, metaNode)\n      //                               , node is in1.GMENode(id, _)\n      //                               , metaNode is in1.GMENode(\"<%=nodeData.id%>\", _)\n      //                               , Base(node, baseNode)\n      //                               , IsMetaType(baseNode, <%=formula.true%>)\n      //                               .\n\n      //traceNode(inInstance, out1.<%=lhsName%>(inId, outBase)),\n      //out1.<%=lhsName%>(inId, outBase) :-  traceNode(in<%=lhsName%>, out<%=lhsName%>)\n      //                               , inBase = in<%=lhsName%>\n      //                               , outBase = out<%=lhsName%>\n      //                               , out<%=lhsName%> is out1.<%=lhsName%>\n      //                               , in1.Base(inInstance, inBase)\n      //                               , inInstance is in1.GMENode(inId, _)\n      //                               .\n                                     \n                                     \n    <%}\n    }\n  }\n%>\n}\n",
    "TWebGMEExtended.4ml.ejs": "<% if (formulaVersion === '2') { %>\ntransform T (in1::WebGME) returns (out1::WebGME)\n{\n  //out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n  out1.Debug(name, metaName) :- in1.GetName(metaName, metaNode)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            .\n}\n\n\ntransform T2 (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(\"src\", srcId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetSrcNode(srcNode, cNode)\n                            , in1.GetNode(srcId, srcNode)\n                            .\n  out1.Debug(\"dst\", dstId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetDstNode(dstNode, cNode)\n                            , in1.GetNode(dstId, dstNode)\n                            .\n}\n\ntransform T2_DS (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(\"src\", srcId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetSrcNode(srcNode, cNode)\n                            , in1.GetNode(srcId, srcNode)\n                            .\n  out1.Debug(\"dst\", dstId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetDstNode(dstNode, cNode)\n                            , in1.GetNode(dstId, dstNode)\n                            .\n}\n\ntransform TMetaTypes (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(nodeId, name) :- in1.GetNode(nodeId, node)\n                            , in1.IsMetaType(node, TRUE)\n                            , in1.GetName(name, node)\n                            .\n}\n\ntransform TInstanceModels (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, metaName) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(metaName, metaNode)\n                            .\n}\n\ntransform TInstancesOfType (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, nodeId) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.GetNode(nodeId, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(\"Center\", metaNode)\n                            .\n}\n<% } %>\n",
    "model.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\ndomain WebGME\n{\n  ///////////////////////\n  // WebGME primitives //\n  ///////////////////////\n\n<% if (formulaVersion === '1') { %>\n  primitive GMENode      ::= (id: String, base: String).\n  primitive GMEAttribute ::= (name:String, value:String, nodeId:String).\n  primitive GMEParent    ::= (childId: String, parentId: String).\n  primitive GMEAbstract  ::= (nodeId:String, value:Boolean).\n  primitive GMEPointer   ::= (name:String, pointsToId:String, nodeId:String).\n  primitive GMEIsMetaType::= (nodeId:String, value:Boolean).\n\n  primitive Debug ::= (String, String).\n<% } else if (formulaVersion === '2') { %>\n  GMENode      ::= new (id: String, base: String).\n  GMEAttribute ::= new (name:String, value:String, nodeId:String).\n  GMEParent    ::= new (childId: String, parentId: String).\n  GMEAbstract  ::= new (nodeId:String, value:Boolean).\n  GMEPointer   ::= new (name:String, pointsToId:String, nodeId:String).\n  GMEIsMetaType    ::= new (nodeId:String, value:Boolean).\n\n  Debug ::= new (String, String).\n<% } %>\n\n  ////////////////\n  // WebGME API //\n  ////////////////\n\n  // Inheritance\n  Base ::= (child:GMENode, base:GMENode).\n  Base(child, base) :-   child is GMENode(childId, baseId)\n                       , base is GMENode(baseId, _)\n                       .\n\n  // InheritanceTree\n  InheritanceTree ::= (child: GMENode, parent: GMENode).\n  InheritanceTree(child, parent) :-   Base(child, parent)\n                                    ; InheritanceTree(child, x)\n                                    , InheritanceTree(x, parent)\n                                    .\n\n  // Containment - Contained relationship\n  Parent ::= (childNode: GMENode, parentNode: GMENode).\n  Parent(childNode, parentNode) :-   GMEParent(childId, parentId)\n                                   , childNode is GMENode(childId, _)\n                                   , parentNode is GMENode(parentId, _)\n                                   .\n\n  // ContainmentTree\n  ContainmentTree ::= (child: GMENode, parent:GMENode).\n  ContainmentTree(child, parent) :-   Parent(child, parent)\n                                    ; ContainmentTree(child, x)\n                                    , ContainmentTree(x, parent)\n                                    .\n\n  // Abstract\n  IsAbstract ::= (GMENode, Boolean).\n  IsAbstract(node, value) :-   GMEAbstract(nodeId, value)\n                             , node is GMENode(nodeId, _)\n                             .\n\n   // IsMetaType\n   IsMetaType ::= (GMENode, Boolean).\n   IsMetaType(node, value) :-   GMEIsMetaType(nodeId, value)\n                              , node is GMENode(nodeId, _)\n                              .\n\n  // Connections\n  Connections ::= (GMENode).\n  Connections(n) :-   n is GMENode\n                    , Pointer(\"src\", _, n)\n                    , Pointer(\"dst\", _, n)\n                    .\n\n\n  // Attributes and Pointers\n  Attribute ::= (name:String, value:String, node:GMENode).\n  Attribute(name, value, node) :-   GMEAttribute(name, value, nodeId)\n                                  , node is GMENode(nodeId, _)\n                                  .\n\n  Pointer ::= (name:String, pointsTo:GMENode, node:GMENode).\n  Pointer(name, pointsTo, node) :-   GMEPointer(name, pointsToId, nodeId)\n                                   , node is GMENode(nodeId, _)\n                                   , pointsTo is GMENode(pointsToId, _)\n                                   .\n\n  // Basic functions: Getters\n  GetName ::= (name:String, node:GMENode).\n  GetName(name, node) :- Attribute(\"name\", name, node).\n\n  GetNode ::= (id:String, node:GMENode).\n  GetNode(id, node) :- node is GMENode(id, _).\n\n  GetSrcNode ::= (srcNode: GMENode, connectionNode: GMENode).\n  GetSrcNode(srcNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"src\", srcNode, connNode)\n                                   .\n\n  GetDstNode ::= (dstNode: GMENode, connectionNode: GMENode).\n  GetDstNode(dstNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"dst\", dstNode, connNode)\n                                   .\n}\n\n<% if (formulaVersion === '1') { %>\ntransform T from in1::WebGME to out1::WebGME\n{\n  /*out1.Debug(cr_name, cr_id) :-\n                                metaDfId = \"/1329246314/808227394/1194191410\"\n                              , appNode = in1.GMENode(\"/817592481/G/n\", _)\n\n                              , cr_name=\"credit_identity\"\n\n                              , metaDfNode = in1.GMENode(metaDfId, _)\n                              , in1.InheritanceTree(child, metaDfNode)\n                              , in1.ContainmentTree(child, appNode)\n                              , child is in1.GMENode(cr_id, _)\n                              , in1.Attribute(\"name\", cr_name, child)\n                              .*/\n  out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n}\n<% } else if (formulaVersion === '2') { %>\ntransform T (in1::WebGME) returns (out1::WebGME)\n{\n  //out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n  out1.Debug(name, metaName) :- in1.GetName(metaName, metaNode)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            .\n}\n\ntransform T2 (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(\"src\", srcId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetSrcNode(srcNode, cNode)\n                            , in1.GetNode(srcId, srcNode)\n                            .\n  out1.Debug(\"dst\", dstId) :- in1.GetNode(\"/817592481/w/k/V\", cNode)\n                            , in1.GetDstNode(dstNode, cNode)\n                            , in1.GetNode(dstId, dstNode)\n                            .\n}\n\ntransform TMetaTypes (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(nodeId, name) :- in1.GetNode(nodeId, node)\n                            , in1.IsMetaType(node, TRUE)\n                            , in1.GetName(name, node)\n                            .\n}\n\ntransform TInstanceModels (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, metaName) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(metaName, metaNode)\n                            .\n}\n\ntransform TInstancesOfType (in1::WebGME) returns (out1::WebGME)\n{\n  out1.Debug(name, nodeId) :- in1.IsMetaType(node, FALSE)\n                            , in1.GetName(name, node)\n                            , in1.GetNode(nodeId, node)\n                            , in1.InheritanceTree(node, metaNode)\n                            , in1.IsMetaType(metaNode, TRUE)\n                            , in1.GetName(\"Center\", metaNode)\n                            .\n}\n<% } %>\n\n\n\n\nmodel m of WebGME\n{\n  <%\n  var nodeData, i, j, keys = Object.keys(nodes);\n  for (i = 0; i < keys.length; i += 1) {\n      nodeData = nodes[keys[i]];%>\n  // <%= nodeData.name %>\n  // <%= nodeData.id %>\n  // <%= nodeData.guid %>\n\n    <% if (nodeData.base) { %>\n      GMENode(\"<%= nodeData.id %>\", \"<%= nodes[nodeData.base].id %>\")<%=formula.lineEnding%>\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\n    <%} else {%>\n      // FCO\n      GMENode(\"<%= nodeData.id %>\", \"\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.parent!=null) { %>\n    GMEParent(\"<%= nodeData.id %>\", \"<%= nodeData.parent %>\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.isAbstract) { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.isMetaType) { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEIsMetaType(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\n      <%\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\n      <%}%>\n    <%}%>\n    <%\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n    for (j = 0; j < attributeNames.length; j += 1) {\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\n      GMEAttribute(\"<%= attributeNames[j] %>\", \"<%= nodeData.attributes[attributeNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\n    <%}%>\n    <%\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    for (j = 0; j < pointerNames.length; j += 1) {\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\n      GMEPointer(\"<%= pointerNames[j] %>\", \"<%= nodeData.pointers[pointerNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\n    <%}%>\n  <%}%>\n}\n",
    "model2.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\ndomain <%= domainName %>\n{\n  // TODO: domain\n<% if (formulaVersion === '1') { %>\n\n<% } else if (formulaVersion === '2') { %>\n\n<% } %>\n\n}\n\n// TODO: transformations\n<% if (formulaVersion === '1') { %>\n\n<% } else if (formulaVersion === '2') { %>\n\n<% } %>\n\n\n// TODO: model\nmodel m of <%= domainName %>\n{\n\n}\n"
}});