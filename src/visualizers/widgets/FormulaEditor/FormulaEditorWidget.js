/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri May 13 2016 16:30:58 GMT-0500 (CDT).
 */

define([
    './FormulaCodeMirrorMode',
    'js/Loader/LoaderCircles',
    'js/DragDrop/DropTarget',
    'plugin/GenFORMULA/GenFORMULA/utils',
    'text!./FormulaEditor.html'
], function (CodeMirror, LoaderCircles, dropTarget, utils, FormulaEditorHtml) {
    'use strict';

    var FormulaEditorWidget,
        WIDGET_CLASS = 'formula-editor',
        CODE_SYNTAX_GUTTER = 'constraint-syntax';

    function clearMarks(cm) {
        var marks = cm.getAllMarks(),
            i;

        for (i = 0; i < marks.length; i += 1) {
            marks[i].clear();
        }
    }

    function markConstraints(cm, resultObject) {
        var line,
            offset,
            position,
            constraintName,
            lineNum = cm.lineCount(),
            markOptions,
            i,
            constraintNameRegex = /\w+(?= *:-)/,
            constraintNames = utils.getUserConstraintNames(cm.getValue());

        clearMarks(cm);
        for (i = 0; i < lineNum; i += 1) {
            line = cm.getLine(i);
            offset = 0;
            constraintName = ':-';
            while (constraintName) {
                constraintName = (line.substr(offset).match(constraintNameRegex) || [''])[0];
                position = offset + line.substr(offset).search(constraintNameRegex);

                if (constraintName &&
                    constraintNames.indexOf(constraintName) !== -1 &&
                    resultObject.hasOwnProperty(constraintName)) {

                    markOptions = {};
                    markOptions.css = resultObject[constraintName] === true ? 'background-color:darkgreen' :
                        'background-color:red';
                    markOptions.title = resultObject[constraintName] === true ? 'constraint evaluated to TRUE' :
                        'constraint evaluated to FALSE';
                    cm.markText(
                        {line: i, ch: position},
                        {line: i, ch: position + constraintName.length},
                        markOptions
                    );
                }

                offset += position + (constraintName || '').length;
            }
        }

    }

    FormulaEditorWidget = function (logger, container, client) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._client = client;
        this._codeMirrorEl = null;
        this._listEl = null;
        this._initialize();

        this._logger.debug('ctor finished');
    };

    FormulaEditorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        $(this._el).css({
            'padding': '0'
        });

        this._el.append(FormulaEditorHtml);

        this._saveConstraintsBtn = this._el.find('#constraintBtn').first();

        this._saveConstraintsBtn.on('click', function (/*event*/) {
            self._previousCodeState = self._codemirror.getValue();
            self.onSaveConstraints(self._previousCodeState);
            self._saveConstraintsBtn.attr('disabled', true);
            self.setResults({}); // constraints probably changed so we clear the results
        });

        this._hookStatusBtn = this._el.find('#hookStatusBtn').first();
        this._hookStatusBtnIcon = this._hookStatusBtn.children().first();
        this._hookStatus = 'off';
        this._hookStatusBtn.attr('title', 'Turn on automatic checking');
        this._hookStatusBtn.on('click', function (/*event*/) {
            if (self._hookStatus === 'off') {
                self.setHookStatus('on');
                self.onHookStateChanged('on');
            } else {
                self.setHookStatus('off');
                self.onHookStateChanged('off');
            }
        });

        this._networkStatusBtn = this._el.find('#networkStatusBtn').first();
        this._networkStatusBtnIcon = this._networkStatusBtn.children().first();
        this.setNetworkStatus(null);

        // adding domain and its own codemirror
        this._domainBtn = this._el.find('#domainBtn').first();
        this._domainMirrorEl = this._el.find('#domainarea').first();
        this._domainMirrorEl.focus();
        this._domainmirror = CodeMirror.fromTextArea(this._domainMirrorEl.get(0), {
            lineNumbers: true,
            readOnly: true,
            matchBrackets: true,
            mode: {
                name: 'formula',
                globalVars: true
            },
            dragDrop: false
        });

        this._translateModelBtn = document.createElement('button');
        this._translateModelBtn.innerHTML = 'get model';
        this._translateModelBtn.className = 'btn btn-xs btn-primary floating-translate-btn';
        this._translateModelBtn.onclick = function (event) {
            $(self._translateModelBtn).hide();
            utils.getCompleteFormulaTranslation(self._client, function (err, result) {
                if (!err) {
                    self.setDomain(result, true);
                }
            });
        };

        $(this._domainmirror.getWrapperElement()).prepend(this._translateModelBtn);
        this._domainVisible = false;
        this._domainBtn.on('click', function (/*event*/) {
            if (self._domainVisible) {
                self._domainVisible = false;
                self._domainBtn.removeClass('active');
                $(self._domainmirror.getWrapperElement()).hide();
            } else {
                self._domainVisible = true;
                self._domainBtn.addClass('active');
                $(self._domainmirror.getWrapperElement()).show();
            }
            self._resizeWidget(self._domainVisible, self._el.height());
        });
        $(self._domainmirror.getWrapperElement()).hide(); //by default we hide it

        this._codeMirrorEl = this._el.find('#codearea').first();
        this._codeMirrorEl.focus();
        this._codemirror = CodeMirror.fromTextArea(this._codeMirrorEl.get(0), {
            lineNumbers: true,
            theme: 'monokai',
            matchBrackets: true,
            mode: {
                name: 'formula',
                globalVars: true
            },
            dragDrop: false,
            gutters: [CODE_SYNTAX_GUTTER, "CodeMirror-linenumbers"]
        });

        this._codemirror.on('change', function () {
            //clear syntax error signs from gutter
            self._codemirror.clearGutter(CODE_SYNTAX_GUTTER);
            clearMarks(self._codemirror);
            self._codemirror.focus();
            self._codemirror.refresh();
            // If the content is changed from the last saved one we allow the save button.
            // Otherwise it will be disabled
            if (self._previousCodeState === self._codemirror.getValue()) {
                self._saveConstraintsBtn.attr('disabled', true);
            } else {
                self._saveConstraintsBtn.attr('disabled', false);
            }
            if (self._autoSaveTimer) {
                clearTimeout(self._autoSaveTimer);
            }
            self._autoSaveTimer = setTimeout(function () {
                self._autoSave();
                self._autoSaveTimer = null;
            }, self._autoSaveInterval);
        });

        this._codemirror.on('drop', function (cm, event) {
            // console.log('dropping', event);
        });

        this._codemirror.on('cursorActivity', function (cm) {
            // console.log('update', cm);
        });

        this._codemirror.on('focus', function (cm) {
            // console.log('focused', cm.getValue());
        });

        this._autoSaveInterval = 2000; //1s autoSave - if change happened
        this._autoSaveTimer = null;
        this._previousCodeState = null;

        self._saveConstraintsBtn.attr('disabled', true);

        this._allOk = this._el.find('#allResultOk').first();
        this._allOk.hide();
        this._allOk.attr('disabled', true);

        //make it dropable
        dropTarget.makeDroppable($(this._el).find('.CodeMirror'), {
            over: function (event, dragInfo) {
                // console.log('over: ', event, dragInfo);
            },
            out: function (event, dragInfo) {
                // console.log('out: ', event, dragInfo);
            },
            drop: function (event, dragInfo) {
                // console.log('drop: ', event, dragInfo);
                var cursor = self._codemirror.getCursor(),
                    metaName,
                    nodeName,
                    gmeNode;
                if (dragInfo && dragInfo.DRAG_ITEMS && dragInfo.DRAG_ITEMS.length === 1) {
                    // we can only insert single types...
                    gmeNode = WebGMEGlobal.Client.getNode(dragInfo.DRAG_ITEMS[0]);
                    if (gmeNode) {
                        metaName = WebGMEGlobal.Client.getNode(gmeNode.getMetaTypeId()).getFullyQualifiedName();
                        nodeName = 'node_' + gmeNode.getFullyQualifiedName().replace(/ /g, "_");
                        metaName = nodeName +
                            ' is ' + metaName + ', ' + nodeName + '.id = "' + dragInfo.DRAG_ITEMS[0] + '"';
                        self._codemirror.replaceRange(metaName, cursor);
                    }
                }
            },
            activate: function (event, dragInfo) {
                // console.log('activate: ', event, dragInfo);
            },
            deactivate: function (event, dragInfo) {
                // console.log('deactivate: ', event, dragInfo);
            }
        });

        this._codemirror.refresh();

        // this._loader = new LoaderCircles({containerElement: this._el});
    };

    FormulaEditorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
        this._resizeWidget(this._domainVisible, height);
    };

    FormulaEditorWidget.prototype._resizeWidget = function (isSplit, height) {
        if (isSplit) {
            $(this._el).find('.CodeMirror').css({
                height: height - 25 > 200 ? (height - 25) / 2 : 100
            });
            this._domainmirror.focus();
            this._domainmirror.refresh();
            this._codemirror.focus();
            this._codemirror.refresh();
        } else {
            $(this._el).find('.CodeMirror').css({
                height: height - 25 > 200 ? height - 25 : 200
            });
            this._codemirror.focus();
            this._codemirror.refresh();
        }
    };

    // Auto-save functions

    FormulaEditorWidget.prototype._autoSave = function () {
        if (this._previousCodeState !== this._codemirror.getValue()) {
            this._previousCodeState = this._codemirror.getValue();
            this.onSaveConstraints(this._previousCodeState);
            this._saveConstraintsBtn.attr('disabled', true);
        }
    };

    FormulaEditorWidget.prototype._startAutoSave = function () {
        // no need for start as we only autosave if user stops editing for autosave-time
    };

    FormulaEditorWidget.prototype._stopAutoSave = function () {
        if (this._autoSaveTimer) {
            clearTimeout(this._autoSaveTimer);
            this._autoSaveTimer = null;
        }
    };

    FormulaEditorWidget.prototype.setDomain = function (text, full) {
        var cursor = this._domainmirror.getCursor();
        this._domainmirror.setValue(text);
        this._domainmirror.refresh();
        this._domainmirror.setCursor(cursor);

        if (full) {
            $(this._translateModelBtn).hide();
        } else {
            $(this._translateModelBtn).show();
        }
    };

    FormulaEditorWidget.prototype.setConstraints = function (text) {
        // setting code from outside so the auto-save should not be triggered
        var cursor;
        this._previousCodeState = text;
        if (text !== this._codemirror.getValue()) {
            cursor = this._codemirror.getCursor();
            this._codemirror.setValue(text);
            this._codemirror.refresh();
            this._codemirror.setCursor(cursor);
            this.setResults({}); //something is changed so we clear the results, just to be on the safe side
        }
    };

    FormulaEditorWidget.prototype.setResults = function (resultObject) {
        var keys = Object.keys(resultObject || {}),
            i = keys.length,
            allOk = i === 0 ? false : true;

        markConstraints(this._codemirror, resultObject);

        while (allOk && i--) {
            if (resultObject[keys[i]] !== true) {
                allOk = false;
            }
        }

        if (allOk) {
            this._allOk.show();
        } else {
            this._allOk.hide();
        }
    };

    FormulaEditorWidget.prototype.setHookStatus = function (newState) {
        this._hookStatusBtnIcon.removeClass('glyphicon-ban-circle');
        this._hookStatusBtnIcon.removeClass('glyphicon-remove-circle');
        this._hookStatusBtnIcon.removeClass('glyphicon-ok-circle');

        switch (newState) {
            case 'off':
                this._hookStatusBtnIcon.addClass('glyphicon-ban-circle');
                this._hookStatusBtn.attr('title', 'Turn on automatic checking');
                this._hookStatus = 'off';
                break;
            case 'on':
                this._hookStatusBtnIcon.addClass('glyphicon glyphicon-ok-circle');
                this._hookStatusBtn.attr('title', 'Turn off automatic checking');
                this._hookStatus = 'on';
                break;
            case 'error':
                this._hookStatusBtnIcon.addClass('glyphicon glyphicon-remove-circle');
                this._hookStatusBtn.attr('title', 'Turn off automatic checking');
                this._hookStatus = 'error';

        }
    };

    FormulaEditorWidget.prototype.getHookStatus = function () {
        return this._hookStatus;
    };

    FormulaEditorWidget.prototype.setConstraintSyntaxErrors = function (errorTxt) {
        var lines, i, lineNumber, marker, numOfLines = this._codemirror.lineCount();

        lines = errorTxt.split('\n');

        lines.push('fuck');

        for (i = 0; i < lines.length; i += 1) {
            lineNumber = Number(lines[i].substring(1, lines[i].indexOf(',')));
            if (lineNumber > 0 && lineNumber <= numOfLines) {
                marker = document.createElement("i");
                marker.className = "glyphicon glyphicon-exclamation-sign";
                marker.style.color = "#822";
                marker.title = lines[i];
                this._codemirror.setGutterMarker(lineNumber - 1, CODE_SYNTAX_GUTTER, marker);
            }
        }
        this._codemirror.focus();
        this._codemirror.refresh();
    };

    FormulaEditorWidget.prototype.setNetworkStatus = function (status, info) {
        this._networkStatusBtnIcon.removeClass('glyphicon-hourglass');
        this._networkStatusBtnIcon.removeClass('glyphicon-warning-sign');
        this._networkStatusBtnIcon.removeClass('glyphicon-thumbs-down');
        $(this._networkStatusBtn).show();
        switch (status) {
            case 'error':
                $(this._networkStatusBtnIcon).css({color: 'red'});
                this._networkStatusBtnIcon.addClass('glyphicon-warning-sign');
                this._networkStatusBtn.attr('title', 'Error in communication with the formula-machine!');
                break;
            case 'wait':
                $(this._networkStatusBtnIcon).css({color: 'black'});
                this._networkStatusBtnIcon.addClass('glyphicon-hourglass');
                this._networkStatusBtn.attr('title', 'Result from the formula-machine are being gathered...');
                break;
            case 'check-failure':
                $(this._networkStatusBtnIcon).css({color: 'red'});
                this._networkStatusBtnIcon.addClass('glyphicon-thumbs-down');
                this._networkStatusBtn.attr('title', 'Failure during check: ' + info);
                break;
            default:
                $(this._networkStatusBtn).hide();
        }
    };
    /* * * * * * * * Visualizer event handlers * * * * * * * */

    FormulaEditorWidget.prototype.onSaveConstraints = function () {
        this._logger.warn('The "onSaveConstraints" function is not overwritten');
    };

    FormulaEditorWidget.prototype.onHookStateChanged = function () {
        this._logger.warn('The "onHookStateChanged" function is not overwritten');
    };
    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FormulaEditorWidget.prototype.destroy = function () {
        this._stopAutoSave();
    };

    FormulaEditorWidget.prototype.onActivate = function () {
        this._logger.debug('FormulaEditorWidget has been activated');
        this._startAutoSave();
    };

    FormulaEditorWidget.prototype.onDeactivate = function () {
        this._logger.debug('FormulaEditorWidget has been deactivated');
        this._stopAutoSave();
    };

    return FormulaEditorWidget;
});
