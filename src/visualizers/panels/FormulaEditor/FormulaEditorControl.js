/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri May 13 2016 16:30:58 GMT-0500 (CDT).
 */

define(['js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames',
    'plugin/GenFORMULA/GenFORMULA/utils',
    'superagent',
    'text!api/componentSettings/FormulaEditor'
], function (CONSTANTS,
             GMEConcepts,
             nodePropertyNames,
             utils,
             superagent,
             componentConfig) {

    'use strict';

    var FormulaEditorControl;

    componentConfig = JSON.parse(componentConfig || {});

    FormulaEditorControl = function (options) {
        var self = this;
        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;

        this._initWidgetEventHandlers();

        // this._widget.setTitle('FormulaEditor');

        this._result = {state: null, projectId: null, commitHash: null, result: null};

        //setting up UI toward the client and the territory
        this._territoryId = this._client.addUI(self, function (events) {
            self._eventCallback(events);
        });
        this._territoryPattern = {};
        this._territoryPattern[CONSTANTS.PROJECT_ROOT_ID] = {children: 0};
        this._client.updateTerritory(this._territoryId, this._territoryPattern);

        this._logger.debug('ctor finished');
    };

    FormulaEditorControl.prototype._initWidgetEventHandlers = function () {
        var self = this;

        this._widget.onSaveConstraints = function (constraints) {
            self._client.setAttributes(CONSTANTS.PROJECT_ROOT_ID, '_formulaConstraints', constraints);
        };

        this._widget.onSaveTransformations = function (transformations) {
            self._client.setAttributes(CONSTANTS.PROJECT_ROOT_ID, '_formulaTransformations', transformations);
        };

        this._widget.onHookStateChanged = function (newSate) {
            if (newSate === 'on') {
                // We have to set the hook for the project
                self._setHook(function (err) {
                    if (err) {
                        self._logger('Failed to set hook:', err);
                        self._widget.setHookStatus('error');
                    }
                });
            } else {
                self._deleteHook(function (err) {
                    if (err) {
                        self._logger('Failed to remove hook:', err);
                        self._widget.setHookStatus('error');
                    }
                });
            }
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    FormulaEditorControl.prototype.selectedObjectChanged = function (nodeId) {
        var self = this;

        self._getCurrentHook(function (err, hook) {
            if (!err) {
                self._widget.setHookStatus('on');
                self._getSimpleResults();
            } else {
                self._widget.setHookStatus('off');
            }
        });
    };

    FormulaEditorControl.prototype._getSimpleResults = function () {
        var self = this,
            commitHash = self._client.getActiveCommitHash(),
            projectId = self._client.getActiveProjectId(),
            interval,
            waiting = false,
            numberOfTries = 0,
            maxTries = 100;

        self._result.state = 'collecting';
        self._result.projectId = projectId;
        self._result.commitHash = commitHash;

        self._widget.setResults({});
        self._widget.setNetworkStatus(null);
        interval = setInterval(function () {
            if (!waiting) {
                waiting = true;
                self._widget.setNetworkStatus('wait');
                superagent.get('4ml/' + encodeURIComponent(projectId) + '/' + encodeURIComponent(commitHash))
                    .end(function (err, result) {
                        waiting = false;
                        numberOfTries += 1;
                        // First, we check if our version is still the one to show
                        if (commitHash !== self._result.commitHash || projectId !== self._result.projectId) {
                            clearInterval(interval);
                            self._widget.setNetworkStatus(null);
                            return;
                        }

                        // Then, we check how to handle the result
                        if (err) {
                            if (err.message.indexOf('Internal Server Error') !== -1 ||
                                err.message.indexOf('Forbidden') !== -1 ||
                                numberOfTries === maxTries) {
                                //there will be no better result
                                clearInterval(interval);
                                self._widget.setNetworkStatus('error');
                            }
                        } else {
                            result = JSON.parse(result.text).result;
                            if (result) {
                                clearInterval(interval);
                                self._widget.setResults(result.constraints || {});
                                self._widget.setConstraintSyntaxErrors(result.syntaxError || "");
                                if (result.error) {
                                    self._widget.setNetworkStatus('check-failure', result.error);
                                } else {
                                    self._widget.setNetworkStatus(null);
                                }
                            }
                        }
                    });
            }
        }, 500);
    };
    /* * * * * * * * Node Event Handling * * * * * * * */
    FormulaEditorControl.prototype._eventCallback = function (events) {
        this._refresh();
    };

    FormulaEditorControl.prototype._refresh = function () {
        var node = this._client.getNode(CONSTANTS.PROJECT_ROOT_ID);

        if (node) {
            this._widget.setConstraints(node.getAttribute('_formulaConstraints') || '');
            this._widget.setTransformations(node.getAttribute('_formulaTransformations') || '');
        } else {
            this._widget.setConstraints('');
            this._widget.setTransformations('');
        }
        this._widget.setDomain(utils.getLanguageAsString(this._client, this._client.getAllMetaNodes()));

        if (this._widget.getHookStatus() === 'on') {
            this._getSimpleResults();
        } else {
            this._widget.setResults({});
            this._widget.setNetworkStatus(null);
        }
    };

    FormulaEditorControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    FormulaEditorControl.prototype._getCurrentHook = function (callback) {
        var projectId = (this._client.getActiveProjectId() || "").replace('+', '/');
        superagent.get('/api/projects/' + projectId + '/hooks/FormulaMachineHook')
            .end(function (err, result) {
                if (err) {
                    result = {};
                }
                result = JSON.parse(result.text || '{}');
                callback(err, result);
            });
    };

    FormulaEditorControl.prototype._setHook = function (callback) {
        var projectId = (this._client.getActiveProjectId() || "").replace('+', '/');
        superagent.put('/api/projects/' + projectId + '/hooks/FormulaMachineHook')
            .send({
                events: [
                    'COMMIT'
                ],
                url: componentConfig.baseUrl || 'http://127.0.0.1:9009/4ml',
                description: 'Hook to external formula machine to allow automated checking.'
            })
            .end(function (err/*, result*/) {
                callback(err);
            });
    };

    FormulaEditorControl.prototype._deleteHook = function (callback) {
        var projectId = (this._client.getActiveProjectId() || "").replace('+', '/');
        superagent.delete('/api/projects/' + projectId + '/hooks/FormulaMachineHook')
            .end(function (err/*, result*/) {
                callback(err);
            });
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FormulaEditorControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        // this._removeToolbarItems();

        if (this._territoryId) {
            this._client.removeUI(this._territoryId);
            this._territoryId = null;
        }
    };

    FormulaEditorControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    FormulaEditorControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    FormulaEditorControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        // this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
        }
    };

    FormulaEditorControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        // this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    return FormulaEditorControl;
});
